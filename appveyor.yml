environment:
  JULIA_TZ_VERSION: "2016j"

  matrix:
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x86/0.4/julia-0.4-latest-win32.exe"
    COVERAGE: "true"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/0.4/julia-0.4-latest-win64.exe"
    COVERAGE: "true"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x86/0.5/julia-0.5-latest-win32.exe"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/0.5/julia-0.5-latest-win64.exe"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x86/0.6/julia-0.6-latest-win32.exe"
  - JULIA_URL: "https://julialang-s3.julialang.org/bin/winnt/x64/0.6/julia-0.6-latest-win64.exe"
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x86/julia-latest-win32.exe"
  - JULIA_URL: "https://julialangnightlies-s3.julialang.org/bin/winnt/x64/julia-latest-win64.exe"

# branches:
#   only:
#     - master
#     - /release-.*/

notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: false
    on_build_status_changed: false

install:
  - ps: "[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12"
# if there's a newer build queued for the same PR, cancel this one
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
        throw "There are newer queued builds for this pull request, failing early." }
# Download most recent Julia Windows binary
  - ps: (new-object net.webclient).DownloadFile(
        $env:JULIA_URL,
        "C:\projects\julia-binary.exe")
# Run installer silently, output to C:\projects\julia
  - C:\projects\julia-binary.exe /S /D=C:\projects\julia

build_script:
# Need to convert from shallow to complete for Pkg.clone to work
  - IF EXIST .git\shallow (git fetch --unshallow)
  - C:\projects\julia\bin\julia --depwarn=no -e "versioninfo();
      Pkg.clone(pwd(), \"TimeZones\"); Pkg.build(\"TimeZones\")"

test_script:
# Using coverage keyword with Julia 0.5+ is broken ()
  - IF DEFINED COVERAGE (
      C:\projects\julia\bin\julia -e "Pkg.test(\"TimeZones\", coverage=true)"
    ) ELSE (
      C:\projects\julia\bin\julia -e "Pkg.test(\"TimeZones\")"
    )

after_test:
# Only processing coverage if we ran with the coverage keyword
  - IF DEFINED COVERAGE (
      C:\projects\julia\bin\julia -e "
        cd(Pkg.dir(\"TimeZones\")); Pkg.add(\"Coverage\"); Pkg.add(\"URIParser\"); using Coverage, URIParser;
        Codecov.submit_generic(process_folder(),
          service=\"appveyor\",
          branch=ENV[\"APPVEYOR_REPO_BRANCH\"],
          commit=ENV[\"APPVEYOR_REPO_COMMIT\"],
          pull_request=get(ENV, \"APPVEYOR_PULL_REQUEST_NUMBER\", \"\"),
          job=escape(join([ENV[\"APPVEYOR_ACCOUNT_NAME\"], ENV[\"APPVEYOR_PROJECT_SLUG\"], ENV[\"APPVEYOR_BUILD_VERSION\"]], '/')),
          slug=ENV[\"APPVEYOR_REPO_NAME\"],
          build=escape(ENV[\"APPVEYOR_JOB_ID\"]),
        )"
    )
