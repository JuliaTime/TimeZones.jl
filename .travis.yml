stages:
  - test
  - Documentation (Test)
  - name: Documentation (Deploy)
    if: (branch = master AND type != pull_request) OR tag =~ ^v

.doc_test: &doc_test
  stage: "Documentation (Test)"
  os: linux
  julia: 1.0
  script:
    - julia --project=docs/ -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd())); Pkg.build("TimeZones")'
    - julia --project=docs/ docs/make.jl
  after_success: skip

.doc_deploy: &doc_deploy
  stage: "Documentation (Deploy)"
  os: linux
  julia: 1.0
  script:
    - julia --project=docs/ -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd())); Pkg.build("TimeZones")'
    - julia --project=docs/ docs/deploy.jl
  after_success: skip

# Note: At the moment `codecov: true` and `coveralls: true` are not working.
language: julia
os:
  - linux
  - osx
  - windows
julia:
  - 1.0  # LTS
  - 1.4  # Latest release
  - nightly
arch:
  - x64
  - x86
jobs:
  fast_finish: true

  # allow_failures:
  #   - julia: nightly
  #     os: osx

  # Test 32-bit only on Linux
  exclude:
    - arch: x86
      os: osx
    - arch: x86
      os: windows

  # Documentation tests and deployment
  include:
    - <<: *doc_test
      os: linux
      julia: 1.0
    - <<: *doc_test
      os: linux
      julia: nightly
    - <<: *doc_deploy

notifications:
  email: false
script:
  - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
  # Only download the tzdata version used in TimeZones.jl's tests to avoid unnecessary
  # load on IANA's servers. However, if the DEFAULT_TZDATA_VERSION constant was
  # changed we need to also build the version specified by the constant to ensure it can be
  # compiled.
  # Note: The `git diff` command has a `--quiet` flag that will suppress output but doesn't
  # catch all changes.
  - git fetch origin +:refs/remotes/origin/HEAD
  - |
    if git diff --exit-code -G"^const DEFAULT_TZDATA_VERSION" origin/HEAD..HEAD > /dev/null; then
        export JULIA_TZ_VERSION="2016j"  # Matches version used by tests
    fi
  - |
    julia -e '
      using Pkg
      if VERSION >= v"1.1"
          Pkg.build(verbose=true)
      else
          Pkg.build()
      end
      Pkg.test(coverage=true)'
after_success:
  - |
    julia -e '
      using Pkg
      Pkg.add("Coverage")
      using Coverage
      Codecov.submit(process_folder())'
